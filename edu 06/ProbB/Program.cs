using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Numerics;
using E = System.Linq.Enumerable;

namespace ProbB {
    class Program {
        protected IOHelper io;

        int getSum(string s) {
            int ans = 0;
            for (int i = 0; i < s.Length; i++) {
                if (s[i] == '0' || s[i] == '6' || s[i] == '9') ans += 6;
                if (s[i] == '1' ) ans += 2;
                if (s[i] == '2' || s[i] == '3' || s[i] == '5') ans += 5;
                if (s[i] == '4') ans += 4;
                if (s[i] == '7') ans += 3;
                if (s[i] == '8') ans += 7;
            }
            return ans;
        }
        public int[] table = new int[] { 0, 14054, 30757, 50457, 70156, 88857, 108558, 129255, 146959, 168658, 189360, 212056, 230759, 252459, 274158, 294859, 316560, 339257, 358961, 382660, 405363, 431059, 452762, 477462, 502161, 525862, 550563, 576260, 598964, 625663, 651363, 677059, 698762, 723462, 748161, 771862, 796563, 822260, 844964, 871663, 897362, 922058, 942761, 966461, 990160, 1012861, 1036562, 1061259, 1082963, 1108662, 1133363, 1159059, 1180762, 1205462, 1230161, 1253862, 1278563, 1304260, 1326964, 1353663, 1379364, 1406060, 1428763, 1454463, 1480162, 1504863, 1530564, 1557261, 1580965, 1608664, 1635361, 1659057, 1678760, 1701460, 1724159, 1745860, 1768561, 1792258, 1812962, 1837661, 1861365, 1889061, 1912764, 1939464, 1966163, 1991864, 2018565, 2046262, 2070966, 2099665, 2127364, 2154060, 2176763, 2202463, 2228162, 2252863, 2278564, 2305261, 2328965, 2356664, 2383366, 2412062, 2436765, 2464465, 2492164, 2518865, 2546566, 2575263, 2600967, 2630666, 2659362, 2684058, 2704761, 2728461, 2752160, 2774861, 2798562, 2823259, 2844963, 2870662, 2895365, 2923061, 2946764, 2973464, 3000163, 3025864, 3052565, 3080262, 3104966, 3133665, 3161365, 3189061, 3212764, 3239464, 3266163, 3291864, 3318565, 3346262, 3370966, 3399665, 3427364, 3454060, 3476763, 3502463, 3528162, 3552863, 3578564, 3605261, 3628965, 3656664, 3683365, 3711061, 3734764, 3761464, 3788163, 3813864, 3840565, 3868262, 3892966, 3921665, 3949366, 3978062, 4002765, 4030465, 4058164, 4084865, 4112566, 4141263, 4166967, 4196666, 4225363, 4251059, 4272762, 4297462, 4322161, 4345862, 4370563, 4396260, 4418964, 4445663, 4471367, 4501063, 4526766, 4555466, 4584165, 4611866, 4640567, 4670264, 4696968, 4727667, 4757366, 4786062, 4810765, 4838465, 4866164, 4892865, 4920566, 4949263, 4974967, 5004666, 5033369, 5065065, 5092768, 5123468, 5154167, 5183868, 5214569, 5246266, 5274970, 5307669, 5339365, 5367061, 5390764, 5417464, 5444163, 5469864, 5496565, 5524262, 5548966, 5577665, 5605368, 5636064, 5662767, 5692467, 5722166, 5750867, 5780568, 5811265, 5838969, 5870668, 5901368, 5932064, 5958767, 5988467, 6018166, 6046867, 6076568, 6107265, 6134969, 6166668, 6197367, 6227063, 6252766, 6281466, 6310165, 6337866, 6366567, 6396264, 6422968, 6453667, 6483368, 6514064, 6540767, 6570467, 6600166, 6628867, 6658568, 6689265, 6716969, 6748668, 6779369, 6811065, 6838768, 6869468, 6900167, 6929868, 6960569, 6992266, 7020970, 7053669, 7085366, 7114062, 7138765, 7166465, 7194164, 7220865, 7248566, 7277263, 7302967, 7332666, 7361370, 7394066, 7422769, 7454469, 7486168, 7516869, 7548570, 7581267, 7610971, 7644670, 7677369, 7709065, 7736768, 7767468, 7798167, 7827868, 7858569, 7890266, 7918970, 7951669, 7983369, 8015065, 8042768, 8073468, 8104167, 8133868, 8164569, 8196266, 8224970, 8257669, 8289365, 8317061, 8340764, 8367464, 8394163, 8419864, 8446565, 8474262, 8498966, 8527665, 8555368, 8586064, 8612767, 8642467, 8672166, 8700867, 8730568, 8761265, 8788969, 8820668, 8851368, 8882064, 8908767, 8938467, 8968166, 8996867, 9026568, 9057265, 9084969, 9116668, 9147367, 9177063, 9202766, 9231466, 9260165, 9287866, 9316567, 9346264, 9372968, 9403667, 9433368, 9464064, 9490767, 9520467, 9550166, 9578867, 9608568, 9639265, 9666969, 9698668, 9729369, 9761065, 9788768, 9819468, 9850167, 9879868, 9910569, 9942266, 9970970, 10003669, 10035366, 10064062, 10088765, 10116465, 10144164, 10170865, 10198566, 10227263, 10252967, 10282666, 10311370, 10344066, 10372769, 10404469, 10436168, 10466869, 10498570, 10531267, 10560971, 10594670, 10627369, 10659065, 10686768, 10717468, 10748167, 10777868, 10808569, 10840266, 10868970, 10901669, 10933368, 10964064, 10990767, 11020467, 11050166, 11078867, 11108568, 11139265, 11166969, 11198668, 11229364, 11256060, 11278763, 11304463, 11330162, 11354863, 11380564, 11407261, 11430965, 11458664, 11485367, 11515063, 11540766, 11569466, 11598165, 11625866, 11654567, 11684264, 11710968, 11741667, 11771367, 11801063, 11826766, 11855466, 11884165, 11911866, 11940567, 11970264, 11996968, 12027667, 12057366, 12086062, 12110765, 12138465, 12166164, 12192865, 12220566, 12249263, 12274967, 12304666, 12333367, 12363063, 12388766, 12417466, 12446165, 12473866, 12502567, 12532264, 12558968, 12589667, 12619368, 12650064, 12676767, 12706467, 12736166, 12764867, 12794568, 12825265, 12852969, 12884668, 12915365, 12943061, 12966764, 12993464, 13020163, 13045864, 13072565, 13100262, 13124966, 13153665, 13181369, 13213065, 13240768, 13271468, 13302167, 13331868, 13362569, 13394266, 13422970, 13455669, 13487368, 13518064, 13544767, 13574467, 13604166, 13632867, 13662568, 13693265, 13720969, 13752668, 13783369, 13815065, 13842768, 13873468, 13904167, 13933868, 13964569, 13996266, 14024970, 14057669, 14089365, 14117061, 14140764, 14167464, 14194163, 14219864, 14246565, 14274262, 14298966, 14327665, 14355368, 14386064, 14412767, 14442467, 14472166, 14500867, 14530568, 14561265, 14588969, 14620668, 14651368, 14682064, 14708767, 14738467, 14768166, 14796867, 14826568, 14857265, 14884969, 14916668, 14947367, 14977063, 15002766, 15031466, 15060165, 15087866, 15116567, 15146264, 15172968, 15203667, 15233368, 15264064, 15290767, 15320467, 15350166, 15378867, 15408568, 15439265, 15466969, 15498668, 15529369, 15561065, 15588768, 15619468, 15650167, 15679868, 15710569, 15742266, 15770970, 15803669, 15835366, 15864062, 15888765, 15916465, 15944164, 15970865, 15998566, 16027263, 16052967, 16082666, 16111370, 16144066, 16172769, 16204469, 16236168, 16266869, 16298570, 16331267, 16360971, 16394670, 16427369, 16459065, 16486768, 16517468, 16548167, 16577868, 16608569, 16640266, 16668970, 16701669, 16733370, 16766066, 16794769, 16826469, 16858168, 16888869, 16920570, 16953267, 16982971, 17016670, 17049366, 17078062, 17102765, 17130465, 17158164, 17184865, 17212566, 17241263, 17266967, 17296666, 17325369, 17357065, 17384768, 17415468, 17446167, 17475868, 17506569, 17538266, 17566970, 17599669, 17631369, 17663065, 17690768, 17721468, 17752167, 17781868, 17812569, 17844266, 17872970, 17905669, 17937368, 17968064, 17994767, 18024467, 18054166, 18082867, 18112568, 18143265, 18170969, 18202668, 18233369, 18265065, 18292768, 18323468, 18354167, 18383868, 18414569, 18446266, 18474970, 18507669, 18539370, 18572066, 18600769, 18632469, 18664168, 18694869, 18726570, 18759267, 18788971, 18822670, 18855367, 18885063, 18910766, 18939466, 18968165, 18995866, 19024567, 19054264, 19080968, 19111667, 19141371, 19175067, 19204770, 19237470, 19270169, 19301870, 19334571, 19368268, 19398972, 19433671, 19467370, 19500066, 19528769, 19560469, 19592168, 19622869, 19654570, 19687267, 19716971, 19750670, 19783367, 19813063, 19838766, 19867466, 19896165, 19923866, 19952567, 19982264, 20008968, 20039667, 20069363, 20095059, 20116762, 20141462, 20166161, 20189862, 20214563, 20240260, 20262964, 20289663, 20315366, 20344062, 20368765, 20396465, 20424164, 20450865, 20478566, 20507263, 20532967, 20562666, 20591366, 20620062, 20644765, 20672465, 20700164, 20726865, 20754566, 20783263, 20808967, 20838666, 20867365, 20895061, 20918764, 20945464, 20972163, 20997864, 21024565, 21052262, 21076966, 21105665, 21133366, 21162062, 21186765, 21214465, 21242164, 21268865, 21296566, 21325263, 21350967, 21380666, 21409367, 21439063, 21464766, 21493466, 21522165, 21549866, 21578567, 21608264, 21634968, 21665667, 21695364, 21722060, 21744763, 21770463, 21796162, 21820863, 21846564, 21873261, 21896965, 21924664, 21951368, 21982064, 22008767, 22038467, 22068166, 22096867, 22126568, 22157265, 22184969, 22216668, 22247367, 22277063, 22302766, 22331466, 22360165, 22387866, 22416567, 22446264, 22472968, 22503667, 22533371, 22567067, 22596770, 22629470, 22662169, 22693870, 22726571, 22760268, 22790972, 22825671, 22859367, 22889063, 22914766, 22943466, 22972165, 22999866, 23028567, 23058264, 23084968, 23115667, 23145370, 23178066, 23206769, 23238469, 23270168, 23300869, 23332570, 23365267, 23394971, 23428670, 23461370, 23494066, 23522769, 23554469, 23586168, 23616869, 23648570, 23681267, 23710971, 23744670, 23777369, 23809065, 23836768, 23867468, 23898167, 23927868, 23958569, 23990266, 24018970, 24051669, 24083370, 24116066, 24144769, 24176469, 24208168, 24238869, 24270570, 24303267, 24332971, 24366670, 24399371, 24433067, 24462770, 24495470, 24528169, 24559870, 24592571, 24626268, 24656972, 24691671, 24725368, 24756064, 24782767, 24812467, 24842166, 24870867, 24900568, 24931265, 24958969, 24990668, 25021372, 25056068, 25086771, 25120471, 25154170, 25186871, 25220572, 25255269, 25286973, 25322672, 25357371, 25391067, 25420770, 25453470, 25486169, 25517870, 25550571, 25584268, 25614972, 25649671, 25683370, 25716066, 25744769, 25776469, 25808168, 25838869, 25870570, 25903267, 25932971, 25966670, 25999366, 26028062, 26052765, 26080465, 26108164, 26134865, 26162566, 26191263, 26216967, 26246666, 26275369, 26307065, 26334768, 26365468, 26396167, 26425868, 26456569, 26488266, 26516970, 26549669, 26581369, 26613065, 26640768, 26671468, 26702167, 26731868, 26762569, 26794266, 26822970, 26855669, 26887368, 26918064, 26944767, 26974467, 27004166, 27032867, 27062568, 27093265, 27120969, 27152668, 27183369, 27215065, 27242768, 27273468, 27304167, 27333868, 27364569, 27396266, 27424970, 27457669, 27489370, 27522066, 27550769, 27582469, 27614168, 27644869, 27676570, 27709267, 27738971, 27772670, 27805367, 27835063, 27860766, 27889466, 27918165, 27945866, 27974567, 28004264, 28030968, 28061667, 28091371, 28125067, 28154770, 28187470, 28220169, 28251870, 28284571, 28318268, 28348972, 28383671, 28417370, 28450066, 28478769, 28510469, 28542168, 28572869, 28604570, 28637267, 28666971, 28700670, 28733372 };
        int getAns(int x) {
            int ba = x / 1000;
            int ans = table[ba];
            for (int i = ba * 1000 + 1; i <= x; i++) {
                ans += getSum(i.ToString());
            }
            return ans;
        }

        public Program(string inputFile, string outputFile) {
            io = new IOHelper(inputFile, outputFile, Encoding.Default);

            /*long ans = 0;
            for (int i = 1; i <= 1000000; i++) {
                ans += getSum(i.ToString());
                if (i % 1000 == 0)
                    io.Write(ans + ",");
            }*/

            int a=io.NextInt(), b=io.NextInt();
            io.WriteLine(getAns(b) - getAns(a-1));

            io.Dispose();
        }

        static void Main(string[] args) {
            Program myProgram = new Program(null,null );
        }
    }

    class IOHelper : IDisposable {
        public StreamReader reader;
        public StreamWriter writer;

        public IOHelper(string inputFile, string outputFile, Encoding encoding) {
            if (inputFile == null)
                reader = new StreamReader(Console.OpenStandardInput(), encoding);
            else
                reader = new StreamReader(inputFile, encoding);

            if (outputFile == null)
                writer = new StreamWriter(Console.OpenStandardOutput(), encoding);
            else
                writer = new StreamWriter(outputFile, false, encoding);

            curLine = new string[] { };
            curTokenIdx = 0;
        }

        string[] curLine;
        int curTokenIdx;

        char[] whiteSpaces = new char[] { ' ', '\t', '\r', '\n' };

        public bool hasNext() {
            if (curTokenIdx >= curLine.Length) {
                //Read next line
                string line = reader.ReadLine();
                if (line != null)
                    curLine = line.Split(whiteSpaces, StringSplitOptions.RemoveEmptyEntries);
                else
                    curLine = new string[] { };
                curTokenIdx = 0;
            }

            return curTokenIdx < curLine.Length;
        }

        public string NextToken() {
            return hasNext() ? curLine[curTokenIdx++] : null;
        }

        public int NextInt() {
            return int.Parse(NextToken());
        }

        public double NextDouble() {
            string tkn = NextToken();
            return double.Parse(tkn, System.Globalization.CultureInfo.InvariantCulture);
        }

        public void Write(double val, int precision) {
            writer.Write(val.ToString("F" + precision, System.Globalization.CultureInfo.InvariantCulture));
        }

        public void Write(object stringToWrite) {
            writer.Write(stringToWrite);
        }

        public void WriteLine(double val, int precision) {
            writer.WriteLine(val.ToString("F" + precision, System.Globalization.CultureInfo.InvariantCulture));
        }

        public void WriteLine(object stringToWrite) {
            writer.WriteLine(stringToWrite);
        }

        public void Dispose() {
            try {
                if (reader != null) {
                    reader.Dispose();
                }
                if (writer != null) {
                    writer.Flush();
                    writer.Dispose();
                }
            } catch { };
        }


        public void Flush() {
            if (writer != null) {
                writer.Flush();
            }
        }
    }
}
